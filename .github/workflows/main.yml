name: Update Filter Lists

on:
  schedule:
    - cron: "0 3 * * 1"
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production

jobs:
  update-filter-lists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm ci

      - name: Download recommended whitelist
        run: bash ./get_recommended_whitelist.sh
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Download recommended filters
        run: bash ./get_recommended_filters.sh
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Clean up old rules and lists
        run: |
          node cf_gateway_rule_delete.js
          node cf_list_delete.js
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_EMAIL: ${{ secrets.CLOUDFLARE_ACCOUNT_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          FAST_MODE: ${{ vars.FAST_MODE }}

      - name: Create new rules and lists
        run: |
          node cf_list_create.js
          node cf_gateway_rule_create.js
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_EMAIL: ${{ secrets.CLOUDFLARE_ACCOUNT_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          FAST_MODE: ${{ vars.FAST_MODE }}

      - name: Send ping request
        if: ${{ secrets.PING_URL != '' }}
        run: curl "${{ secrets.PING_URL }}"

  retry1:
    needs: update-filter-lists
    runs-on: ubuntu-latest
    if: needs.update-filter-lists.result == 'failure'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm ci

      - name: Download recommended whitelist
        run: bash ./get_recommended_whitelist.sh
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Download recommended filters
        run: bash ./get_recommended_filters.sh
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Clean up old rules and lists
        run: |
          node cf_gateway_rule_delete.js
          node cf_list_delete.js
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_EMAIL: ${{ secrets.CLOUDFLARE_ACCOUNT_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          FAST_MODE: ${{ vars.FAST_MODE }}

      - name: Create new rules and lists
        run: |
          node cf_list_create.js
          node cf_gateway_rule_create.js
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_EMAIL: ${{ secrets.CLOUDFLARE_ACCOUNT_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          FAST_MODE: ${{ vars.FAST_MODE }}

      - name: Send ping request
        if: ${{ secrets.PING_URL != '' }}
        run: curl "${{ secrets.PING_URL }}"

  retry2:
    needs: retry1
    runs-on: ubuntu-latest
    if: needs.retry1.result == 'failure'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm ci

      - name: Download recommended whitelist
        run: bash ./get_recommended_whitelist.sh
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Download recommended filters
        run: bash ./get_recommended_filters.sh
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Clean up old rules and lists
        run: |
          node cf_gateway_rule_delete.js
          node cf_list_delete.js
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_EMAIL: ${{ secrets.CLOUDFLARE_ACCOUNT_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          FAST_MODE: ${{ vars.FAST_MODE }}

      - name: Create new rules and lists
        run: |
          node cf_list_create.js
          node cf_gateway_rule_create.js
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_EMAIL: ${{ secrets.CLOUDFLARE_ACCOUNT_EMAIL }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          FAST_MODE: ${{ vars.FAST_MODE }}

      - name: Send ping request
        if: ${{ secrets.PING_URL != '' }}
        run: curl "${{ secrets.PING_URL }}"
